{"ast":null,"code":"var _jsxFileName = \"/Users/michaelofengenden/Desktop/Infapp/app/src/dataSample.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function dataSample() {\n  _s();\n  const [paresedData, setParsedData] = useState([]);\n  const [tableRows, setTableRows] = useState([]);\n  const [values, setValues] = useState([]);\n  const changeHandler = e => {\n    Papa.parse(e.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n        console.log(results.data);\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n        setParsedData(results.data);\n        setTableRows(rowsArray[0]);\n        setValues(valuesArray);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \" Data Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h8\", {\n      children: \" Assume food comes from updated API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"dataSample\",\n      accept: \".csv\",\n      onChange: changeHandler,\n      style: {\n        display: \"block\",\n        margin: \"10px auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"theat\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableRows.map((rows, index) => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              children: rows\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 28\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: values.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: value.map((val, i) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 32\n              }, this);\n            })\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(dataSample, \"YLeiZOcPkoMyTdCrgN0WUUpiCWQ=\");","map":{"version":3,"names":["React","useState","Papa","dataSample","paresedData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","e","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","console","log","data","map","d","push","Object","keys","display","margin","rows","index","value","val","i"],"sources":["/Users/michaelofengenden/Desktop/Infapp/app/src/dataSample.js"],"sourcesContent":["import React from 'react';\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\n\nexport default function dataSample() {\n    const [paresedData, setParsedData] = useState([])\n    const [tableRows, setTableRows] = useState([])\n    const [values, setValues] = useState([])\n    const changeHandler = (e) => { \n        Papa.parse(e.target.files[0], {\n            header: true,\n            skipEmptyLines: true, \n            complete: function (results) {\n                const rowsArray = [];\n                const valuesArray = [];\n                console.log(results.data)\n                results.data.map((d) => {\n                    rowsArray.push(Object.keys(d));\n                    valuesArray.push(Object.values(d));\n                });\n\n                setParsedData(results.data);\n                setTableRows(rowsArray[0]);\n                setValues(valuesArray);               \n            },\n        });\n    }; \n  return (\n    <div> \n    <h1 align=\"center\"> Data Sample</h1>\n    <h8> Assume food comes from updated API</h8>\n    <input \n    type=\"file\" \n    name=\"dataSample\"\n    accept=\".csv\"\n    onChange={changeHandler}\n    style={{ display: \"block\", margin: \"10px auto\"}}/>\n    <br /> \n    <br /> \n    <table>\n        <theat>\n            <tr>\n                {tableRows.map((rows, index) => {\n                    return <th key={index}>{rows}</th>\n                })}\n            </tr>\n        </theat>\n        <tbody>\n            {values.map((value, index) => {\n                return (\n                    <tr key={index}>\n                    {value.map((val,i) => {\n                        return <td key={i}>{val}</td>;\n                    })}\n                    </tr>\n                );\n            })}\n        </tbody>\n    </table>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAC;AAE7B,eAAe,SAASC,UAAU,GAAG;EAAA;EACjC,MAAM,CAACC,WAAW,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMS,aAAa,GAAIC,CAAC,IAAK;IACzBT,IAAI,CAACU,KAAK,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC1BC,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,UAAUC,OAAO,EAAE;QACzB,MAAMC,SAAS,GAAG,EAAE;QACpB,MAAMC,WAAW,GAAG,EAAE;QACtBC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACK,IAAI,CAAC;QACzBL,OAAO,CAACK,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAK;UACpBN,SAAS,CAACO,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,CAAC;UAC9BL,WAAW,CAACM,IAAI,CAACC,MAAM,CAACnB,MAAM,CAACiB,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC;QAEFpB,aAAa,CAACa,OAAO,CAACK,IAAI,CAAC;QAC3BhB,YAAY,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1BV,SAAS,CAACW,WAAW,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN,CAAC;EACH,oBACE;IAAA,wBACA;MAAI,KAAK,EAAC,QAAQ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eACpC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA4C,eAC5C;MACA,IAAI,EAAC,MAAM;MACX,IAAI,EAAC,YAAY;MACjB,MAAM,EAAC,MAAM;MACb,QAAQ,EAAEV,aAAc;MACxB,KAAK,EAAE;QAAEmB,OAAO,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAW;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE,eAClD;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,wBACI;QAAA,uBACI;UAAA,UACKxB,SAAS,CAACkB,GAAG,CAAC,CAACO,IAAI,EAAEC,KAAK,KAAK;YAC5B,oBAAO;cAAA,UAAiBD;YAAI,GAAZC,KAAK;cAAA;cAAA;cAAA;YAAA,QAAa;UACtC,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA;MACD;QAAA;QAAA;QAAA;MAAA,QACD,eACR;QAAA,UACKxB,MAAM,CAACgB,GAAG,CAAC,CAACS,KAAK,EAAED,KAAK,KAAK;UAC1B,oBACI;YAAA,UACCC,KAAK,CAACT,GAAG,CAAC,CAACU,GAAG,EAACC,CAAC,KAAK;cAClB,oBAAO;gBAAA,UAAaD;cAAG,GAAPC,CAAC;gBAAA;gBAAA;gBAAA;cAAA,QAAY;YACjC,CAAC;UAAC,GAHOH,KAAK;YAAA;YAAA;YAAA;UAAA,QAIT;QAEb,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GAzDuB7B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}