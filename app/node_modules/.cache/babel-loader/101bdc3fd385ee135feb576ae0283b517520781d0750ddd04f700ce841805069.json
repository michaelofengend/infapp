{"ast":null,"code":"var _jsxFileName = \"/Users/michaelofengenden/Desktop/Infapp/app/src/useWriter.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useWriter() {\n  _s();\n  // State to store parsed data\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: changeHandler,\n      accept: \".csv\",\n      style: {\n        display: \"block\",\n        margin: \"10px auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableRows.map((rows, index) => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              children: rows\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: values.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: value.map((val, i) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 26\n              }, this);\n            })\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(useWriter, \"0OmtFBKQjJA2CM4YMPVc3GVsSh8=\");\nexport default useWriter;","map":{"version":3,"names":["useState","Papa","useWriter","parsedData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","data","map","d","push","Object","keys","display","margin","rows","index","value","val","i"],"sources":["/Users/michaelofengenden/Desktop/Infapp/app/src/useWriter.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\n\nfunction useWriter() {\n  // State to store parsed data\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n\n  const changeHandler = (event) => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map((d) => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      },\n    });\n  };\n\n  return (\n    <div>\n      {/* File Uploader */}\n      <input\n        type=\"file\"\n        name=\"file\"\n        onChange={changeHandler}\n        accept=\".csv\"\n        style={{ display: \"block\", margin: \"10px auto\" }}\n      />\n      <br />\n      <br />\n      {/* Table */}\n      <table>\n        <thead>\n          <tr>\n            {tableRows.map((rows, index) => {\n              return <th key={index}>{rows}</th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {values.map((value, index) => {\n            return (\n              <tr key={index}>\n                {value.map((val, i) => {\n                  return <td key={i}>{val}</td>;\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default useWriter;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAC;AAE7B,SAASC,SAAS,GAAG;EAAA;EACnB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMS,aAAa,GAAIC,KAAK,IAAK;IAC/B;IACAT,IAAI,CAACU,KAAK,CAACD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAChCC,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,UAAUC,OAAO,EAAE;QAC3B,MAAMC,SAAS,GAAG,EAAE;QACpB,MAAMC,WAAW,GAAG,EAAE;;QAEtB;QACAF,OAAO,CAACG,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAK;UACtBJ,SAAS,CAACK,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,CAAC;UAC9BH,WAAW,CAACI,IAAI,CAACC,MAAM,CAACjB,MAAM,CAACe,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC;;QAEF;QACAlB,aAAa,CAACa,OAAO,CAACG,IAAI,CAAC;;QAE3B;QACAd,YAAY,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;;QAE1B;QACAV,SAAS,CAACW,WAAW,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACE;IAAA,wBAEE;MACE,IAAI,EAAC,MAAM;MACX,IAAI,EAAC,MAAM;MACX,QAAQ,EAAEV,aAAc;MACxB,MAAM,EAAC,MAAM;MACb,KAAK,EAAE;QAAEiB,OAAO,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAY;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACF;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA;MAAA;MAAA;IAAA,QAAM,eAEN;MAAA,wBACE;QAAA,uBACE;UAAA,UACGtB,SAAS,CAACgB,GAAG,CAAC,CAACO,IAAI,EAAEC,KAAK,KAAK;YAC9B,oBAAO;cAAA,UAAiBD;YAAI,GAAZC,KAAK;cAAA;cAAA;cAAA;YAAA,QAAa;UACpC,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA;MACC;QAAA;QAAA;QAAA;MAAA,QACC,eACR;QAAA,UACGtB,MAAM,CAACc,GAAG,CAAC,CAACS,KAAK,EAAED,KAAK,KAAK;UAC5B,oBACE;YAAA,UACGC,KAAK,CAACT,GAAG,CAAC,CAACU,GAAG,EAAEC,CAAC,KAAK;cACrB,oBAAO;gBAAA,UAAaD;cAAG,GAAPC,CAAC;gBAAA;gBAAA;gBAAA;cAAA,QAAY;YAC/B,CAAC;UAAC,GAHKH,KAAK;YAAA;YAAA;YAAA;UAAA,QAIT;QAET,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QACI;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV;AAAC,GAxEQ3B,SAAS;AA0ElB,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}